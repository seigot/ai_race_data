diff --git a/judge/judgeServer.py b/judge/judgeServer.py
index 2143618..305a7a3 100644
--- a/judge/judgeServer.py
+++ b/judge/judgeServer.py
@@ -7,6 +7,7 @@ import argparse
 import json
 import threading
 import pprint
+from decimal import Decimal, Context
 ## flask
 from flask import Flask, request, jsonify, render_template
 from flask import send_from_directory
@@ -41,6 +42,36 @@ class TimeManagementClass():
         self.lap_start_time = 0.00
         self.lap_time_list = list(range(0))
 
+class ObstacleClass():
+    def __init__(self, ObstacleKind, ObstacleName):
+        self.kind = ObstacleKind
+        self.name = ObstacleName
+        self.location = (0.0, 0.0) # x,y
+        self.collision_counter = 0
+        print(self.name + " class, created")
+
+    def clear(self):
+        self.location = (0.0, 0.0) # x,y
+        self.collision_counter = 0
+
+    def update_location(location):
+        self.location = location
+
+    def update_collision_counter(self, val):
+        self.collision_counter = self.collision_counter + val
+
+    def clear_collision_counter(self):
+        self.collision_counter = 0
+
+    def get_kind(self):
+        return self.kind
+
+    def get_name(self):
+        return self.name
+
+    def get_collision_counter(self):
+        return self.collision_counter
+
 class GameManagerClass:
 
     ####
@@ -53,6 +84,16 @@ class GameManagerClass:
         self.time_mode = args.timemode
         self.system_time = TimeManagementClass() # system time
         self.ros_time = TimeManagementClass()    # ros time
+        print("hoge")
+        self.ObstacleClasses = [
+            ObstacleClass("cone", "coneA"),
+            ObstacleClass("cone", "coneB"),
+            ObstacleClass("cone", "coneC"),
+            ObstacleClass("cone", "coneD"),
+            ObstacleClass("cone", "coneE"),
+            ObstacleClass("cone", "coneF"),
+            ObstacleClass("cone", "coneG")
+        ]
         self.initGameData()
 
     def setJudgeState(self, state):
@@ -165,13 +206,18 @@ class GameManagerClass:
         app.logger.info("updateData")
 
         # check which data is requested to update
-        ## lap count
         if "lap_count" in body:
-            self.lap_count = self.lap_count + int(body["lap_count"])
+            ## lap count
+            ## delete unnecessary 0, from lap_count value
+            current_lap = float(self.lap_count) + float(body["lap_count"])
+            self.lap_count = self.decimal_normalize( float(current_lap) )
         if "courseout_count" in body:
             self.courseout_count = self.courseout_count + int(body["courseout_count"])
         if "recovery_count" in body:
             self.recovery_count = self.recovery_count + int(body["recovery_count"])
+        if "cone_count" in body:
+            # update cone count
+            #self.courseout_count = self.courseout_count + int(body["courseout_count"])
         if "is_courseout" in body:
             self.is_courseout = int(body["is_courseout"])
             print(self.is_courseout)
@@ -182,6 +228,13 @@ class GameManagerClass:
     def getGameStateJson(self):
         self.updateTime()
 
+        # get obstacle "Cone" infomation
+        collision_counter_cone = list(range(0))
+        for ObstacleClass in self.ObstacleClasses:
+            if ObstacleClass.get_kind() == "cone":
+                counter = ObstacleClass.get_collision_counter()
+                collision_counter_cone.append(counter)
+
         # state data to json
         json = {
             "field_info": {
@@ -201,6 +254,9 @@ class GameManagerClass:
                     "system_time": self.system_time.lap_time_list,
                     "ros_time": self.ros_time.lap_time_list,
                 },
+                "collision_count": {
+                    "cone": collision_counter_cone,
+                },
                 "time_mode": self.time_mode,
                 "time_max": self.time_max,
                 "lap_count": self.lap_count,
@@ -218,6 +274,8 @@ class GameManagerClass:
     def writeResult(self):
         ## For Debug, output Result file.
         script_dir = os.path.dirname(os.path.abspath(__file__))
+        #current_time_str = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
+        #log_file_path = script_dir + "/log/" + "game_result_" + current_time_str + ".log"
         log_file_path = script_dir + "/log/" + "game_result.log"
         with open(log_file_path, "w") as f:
             jsondata = self.getGameStateJson()
@@ -226,6 +284,14 @@ class GameManagerClass:
             print("result log: " + log_file_path)
             pprint.pprint(jsondata, compact = True)
 
+    def decimal_normalize(self, f):
+        """数値fの小数点以下を正規化する。文字列を返す"""
+        def _remove_exponent(d):
+            return d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()
+        a = Decimal.normalize(Decimal(str(f)))
+        b = _remove_exponent(a)
+        return str(b)
+
 ### API definition
 @app.route('/')
 def index():
diff --git a/judge/request_to_judge.sh b/judge/request_to_judge.sh
index 21c7c8b..8a786cc 100755
--- a/judge/request_to_judge.sh
+++ b/judge/request_to_judge.sh
@@ -28,6 +28,8 @@ do
 done
 
 JUDGESERVER_REQUEST_URL="http://${HOSTADDR}/judgeserver/request"
+JUDGESERVER_UPDATEDATA_URL="http://${HOSTADDR}/judgeserver/updateData"
+JUDGESERVER_GETSTATE_URL="http://${HOSTADDR}/judgeserver/getState"
 
 ########### script ########################
 # set state to "running"
@@ -39,6 +41,8 @@ elif [ "$REQ_STATE" == "stop" ]; then
     curl -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '{"change_state":"stop"}' ${JUDGESERVER_REQUEST_URL}
 elif [ "$REQ_STATE" == "init" ]; then
     curl -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '{"change_state":"init"}' ${JUDGESERVER_REQUEST_URL}
+elif [ "$REQ_STATE" == "lap_count" ]; then
+    curl -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '{"lap_count":0.25}' ${JUDGESERVER_UPDATEDATA_URL}
 else
     echo "invalid parameter... ${HOSTADDR}, ${REQ_STATE}"
 fi
diff --git a/judge/timer.py b/judge/timer.py
index 8be4778..31a195d 100644
--- a/judge/timer.py
+++ b/judge/timer.py
@@ -255,6 +255,8 @@ class Window(QMainWindow):
         lap_count = data["judge_info"]["lap_count"]
         recovery_count = data["judge_info"]["recovery_count"]
         courseout_count = data["judge_info"]["courseout_count"]
+        collision_count_cone = data["judge_info"]["collision_count"]["cone"]
+        print(collision_count_cone)
         #courseout_count = 0
         judgestate = data["judge_info"]["judgestate"]
 
